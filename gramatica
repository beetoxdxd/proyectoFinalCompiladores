I0 = {PROGRAM' -> °PROGRAM, PROGRAM -> °DECLARATION, DECLARATION -> °FUN_DECL DECLARATION,
      DECLARATION -> °VAR_DECL DECLARATION, DECLARATION -> °STATEMENT DECLARATION, DECLARATION -> °,
      FUN_DECL -> °fun FUNCTION, VAR_DECL -> °var id VAR_INIT;, STATEMENT -> °EXPR_STMT,
      STATEMENT -> °FOR_STMT, STATEMENT -> °IF_STMT, STATEMENT -> °PRINT_STMT, STATEMENT -> °RETURN_STMT,
      STATEMENT -> °WHILE_STMT, STATEMENT -> °BLOCK, EXPR_STMT -> °EXPRESSION;,
      FOR_STMT -> °for(FOR_STMT_1 FOR_STMT_2 FOR_STMT_3) STATEMENT,
      IF_STMT -> °if(EXPRESSION) STATEMENT ELSE_STATEMENT, PRINT_STMT -> °print EXPRESSION;,
      RETURN_STMT -> °return RETURN_EXP_OPC;, WHILE_STMT -> °while(EXPRESSION) STATEMENT,
      BLOCK -> °{DECLARATION}, EXPRESSION -> °ASSIGNMENT, ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC,
      LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)}     ☑

Ir_a(I0, PROGRAM) = {PROGRAM' -> PROGRAM°} = I1     ☑

Ir_a(I0, DECLARATION) = {PROGRAM -> DECLARATION°} = I2      ☑

Ir_a(I0, FUN_DECL) = {DECLARATION -> FUN_DECL °DECLARATION, DECLARATION-> °FUN_DECL DECLARATION,
      DECLARATION -> °VAR_DECL DECLARATION, DECLARATION -> °STATEMENT DECLARATION, DECLARATION -> °,
      FUN_DECL -> °fun FUNCTION, VAR_DECL -> °var id VAR_INIT;, STATEMENT -> °EXPR_STMT,
      STATEMENT -> °FOR_STMT, STATEMENT -> °IF_STMT, STATEMENT -> °PRINT_STMT, STATEMENT -> °RETURN_STMT,
      STATEMENT -> °WHILE_STMT, STATEMENT -> °BLOCK, EXPR_STMT -> °EXPRESSION;,
      FOR_STMT -> °for(FOR_STMT_1 FOR_STMT_2 FOR_STMT_3) STATEMENT,
      IF_STMT -> °if(EXPRESSION) STATEMENT ELSE_STATEMENT, PRINT_STMT -> °print EXPRESSION;,
      RETURN_STMT -> °return RETURN_EXP_OPC;, WHILE_STMT -> °while(EXPRESSION) STATEMENT,
      BLOCK -> °{DECLARATION}, EXPRESSION -> °ASSIGNMENT, ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC,
      LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I3        ☑

Ir_a(I0, VAR_DECL) = {DECLARATION -> VAR_DECL °DECLARATION, DECLARATION -> °FUN_DECL DECLARATION,
      DECLARATION -> °VAR_DECL DECLARATION, DECLARATION -> °STATEMENT DECLARATION, DECLARATION -> °,
      FUN_DECL -> °fun FUNCTION, VAR_DECL -> °var id VAR_INIT;, STATEMENT -> °EXPR_STMT,
      STATEMENT -> °FOR_STMT, STATEMENT -> °IF_STMT, STATEMENT -> °PRINT_STMT, STATEMENT -> °RETURN_STMT,
      STATEMENT -> °WHILE_STMT, STATEMENT -> °BLOCK, EXPR_STMT -> °EXPRESSION;,
      FOR_STMT -> °for(FOR_STMT_1 FOR_STMT_2 FOR_STMT_3) STATEMENT,
      IF_STMT -> °if(EXPRESSION) STATEMENT ELSE_STATEMENT, PRINT_STMT -> °print EXPRESSION;,
      RETURN_STMT -> °return RETURN_EXP_OPC;, WHILE_STMT -> °while(EXPRESSION) STATEMENT,
      BLOCK -> °{DECLARATION}, EXPRESSION -> °ASSIGNMENT, ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC,
      LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I4        ☑

Ir_a(I0, STATEMENT) = {DECLARATION -> STATEMENT °DECLARATION, DECLARATION -> °FUN_DECL DECLARATION,
      DECLARATION -> °VAR_DECL DECLARATION, DECLARATION -> °STATEMENT DECLARATION, DECLARATION -> °,
      FUN_DECL -> °fun FUNCTION, VAR_DECL -> °var id VAR_INIT;, STATEMENT -> °EXPR_STMT,
      STATEMENT -> °FOR_STMT, STATEMENT -> °IF_STMT, STATEMENT -> °PRINT_STMT, STATEMENT -> °RETURN_STMT,
      STATEMENT -> °WHILE_STMT, STATEMENT -> °BLOCK, EXPR_STMT -> °EXPRESSION;,
      FOR_STMT -> °for(FOR_STMT_1 FOR_STMT_2 FOR_STMT_3) STATEMENT,
      IF_STMT -> °if(EXPRESSION) STATEMENT ELSE_STATEMENT, PRINT_STMT -> °print EXPRESSION;,
      RETURN_STMT -> °return RETURN_EXP_OPC;, WHILE_STMT -> °while(EXPRESSION) STATEMENT,
      BLOCK -> °{DECLARATION}, EXPRESSION -> °ASSIGNMENT, ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC,
      LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I5        ☑

Ir_a(I0, fun) = {FUN_DECL -> fun °FUNCTION, FUNCTION -> °id(PARAMETERS_OPC) BLOCK} = I6     ☑

Ir_a(I0, var) = {VAR_DECL -> var °id VAR_INIT;} = I7        ☑

Ir_a(I0, EXPR_STMT) = {STATEMENT -> EXPR_STMT °} = I8       ☑

Ir_a(I0, FOR_STMT) = {STATEMENT -> FOR_STMT °} = I9     ☑

Ir_a(I0, IF_STMT) = {STATEMENT -> IF_STMT °} = I10      ☑

Ir_a(I0, PRINT_STMT) = {STATEMENT -> PRINT_STMT °} = I11        ☑

Ir_a(I0, RETURN_STMT) = {STATEMENT -> RETURN_STMT °} = I12      ☑

Ir_a(I0, WHILE_STMT) = {STATEMENT -> WHILE_STMT °} = I13        ☑

Ir_a(I0, BLOCK) = {STATEMENT -> BLOCK °} = I14      ☑

Ir_a(I0, EXPRESSION) = {EXPR_STMT -> EXPRESSION°;} = I15        ☑

Ir_a(I0, for) = {FOR_STMT -> for°(FOR_STMT_1 FOR_STMT_2 FOR_STMT_3) STATEMENT} = I16        ☑

Ir_a(I0, if) = {IF_STMT -> if°(EXPRESSION) STATEMENT ELSE_STATEMENT} = I17      ☑

Ir_a(I0, print) = {PRINT_STMT -> print °EXPRESSION, EXPRESSION -> °ASSIGNMENT, ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC,
      LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I18       ☑

Ir_a(I0, return) = {RETURN_STMT -> return °RETURN_EXP_OPC;, RETURN_EXP_OPC -> °EXPRESSION,
      RETURN_EXP_OPC -> °} = I19        ☑

Ir_a(I0, while) = {WHILE_STMT -> while °(EXPRESSION) STATEMENT} = I20       ☑

Ir_a(I0, {) = {BLOCK -> {°DECLARATION}, DECLARATION -> °FUN_DECL DECLARATION,
      DECLARATION -> °VAR_DECL DECLARATION, DECLARATION -> °STATEMENT DECLARATION, DECLARATION -> °,
      FUN_DECL -> °fun FUNCTION, VAR_DECL -> °var id VAR_INIT;, STATEMENT -> °EXPR_STMT,
      STATEMENT -> °FOR_STMT, STATEMENT -> °IF_STMT, STATEMENT -> °PRINT_STMT, STATEMENT -> °RETURN_STMT,
      STATEMENT -> °WHILE_STMT, STATEMENT -> °BLOCK, EXPR_STMT -> °EXPRESSION;,
      FOR_STMT -> °for(FOR_STMT_1 FOR_STMT_2 FOR_STMT_3) STATEMENT,
      IF_STMT -> °if(EXPRESSION) STATEMENT ELSE_STATEMENT, PRINT_STMT -> °print EXPRESSION;,
      RETURN_STMT -> °return RETURN_EXP_OPC;, WHILE_STMT -> °while(EXPRESSION) STATEMENT,
      BLOCK -> °{DECLARATION}, EXPRESSION -> °ASSIGNMENT, ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC,
      LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I21       ☑

Ir_a(I0, ASSIGNMENT) = {EXPRESSION -> ASSIGNMENT°} = I22        ☑

Ir_a(I0, LOGIC_OR) = {ASSIGNMENT -> LOGIC_OR °ASSIGNMENT_OPC, ASSIGNMENT_OPC -> °= EXPRESSION,
      ASSIGNMENT_OPC -> °} = I23        ☑

Ir_a(I0, LOGIC_AND) = {LOGIC_OR -> LOGIC_AND °LOGIC_OR_2, LOGIC_OR_2 -> °or LOGIC_AND LOGIC_OR_2
      LOGIC_OR_2 -> °} = I24        ☑

Ir_a(I0, EQUALITY) = {LOGIC_AND -> EQUALITY °LOGIC_AND_2, LOGIC_AND_2 -> °and EQUALITY LOGIC_AND_2,
      LOGIC_AND_2 -> °} = I25       ☑

Ir_a(I0, COMPARISON) = {EQUALITY -> COMPARISON °EQUALITY_2, EQUALITY_2 -> °!= COMPARISON EQUALITY_2,
      EQUALITY_2 -> °== COMPARISON EQUALITY_2, EQUALITY_2 -> °} = I26       ☑

Ir_a(I0, TERM) = {COMPARISON -> TERM °COMPARISON_2, COMPARISON_2 -> °> TERM COMPARISON_2,
      COMPARISON_2 -> °>= TERM COMPARISON_2, COMPARISON_2 -> °< TERM COMPARISON_2,
      COMPARISON_2 -> °<= TERM COMPARISON_2, COMPARISON_2 -> °} = I27       ☑

Ir_a(I0, FACTOR) = {TERM -> FACTOR °TERM_2, TERM_2 -> °- FACTOR TERM_2, TERM_2 -> °+ FACTOR TERM_2,
      TERM_2 -> °} = I28        ☑

Ir_a(I0, UNARY) = {FACTOR -> UNARY °FACTOR_2, FACTOR_2 -> °/ UNARY FACTOR_2, FACTOR_2 -> °* UNARY FACTOR_2,
      FACTOR_2 -> °} = I29      ☑

Ir_a(I0, !) = {UNARY -> ! °UNARY, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I30       ☑

Ir_a(I0, -) = {UNARY -> - °UNARY, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I31       ☑

Ir_a(I0, CALL) = {UNARY -> CALL °} = I32        ☑

Ir_a(I0, PRIMARY) = {CALL -> PRIMARY °CALL_2, CALL_2 -> °(ARGUMENTS_OPC), CALL_2 -> °} = I33        ☑

Ir_a(I0, true) = {PRIMARY -> true °} = I34      ☑

Ir_a(I0, false) = {PRIMARY -> false °} = I35        ☑

Ir_a(I0, null) = {PRIMARY -> null °} = I36      ☑

Ir_a(I0, number) = {PRIMARY -> number °} = I37      ☑

Ir_a(I0, string) = {PRIMARY -> string °} = I38      ☑

Ir_a(I0, id) = {PRIMARY -> id °} = I39      ☑

Ir_a(I0, '(') = {PRIMARY -> (°EXPRESSION), EXPRESSION -> °ASSIGNMENT, ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC,
      LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I40       ☑

Ir_a(I3, DECLARATION) = {DECLARATION -> FUN_DECL DECLARATION°} = I41        ☑

Ir_a(I3, FUN_DECL) = {DECLARATION -> FUN_DECL °DECLARATION, ...} = I3       ☑
Ir_a(I4, FUN_DECL)
Ir_a(I5, FUN_DECL)
Ir_a(I21, FUN_DECL)

Ir_a(I3, VAR_DECL) = {DECLARATION -> VAR_DECL °DECLARATION, ...} = I4       ☑
Ir_a(I4, VAR_DECL)
Ir_a(I5, VAR_DECL)
Ir_a(I21, VAR_DECL)

Ir_a(I3, STATEMENT) = {DECLARATION -> STATEMENT °DECLARATION, ...} = I5     ☑
Ir_a(I4, STATEMENT)
Ir_a(I5, STATEMENT)
Ir_a(I21, STATEMENT)

Ir_a(I3, fun) = {FUN_DECL -> fun °FUNCTION, ...} = I6       ☑
Ir_a(I4, fun)
Ir_a(I5, fun)
Ir_a(I21, fun)

Ir_a(I3, var) = {VAR_DECL -> var °id VAR_INIT;} = I7        ☑
Ir_a(I4, var)
Ir_a(I5, var)
Ir_a(I21, var)

Ir_a(I3, EXPR_STMT) = {STATEMENT -> EXPR_STMT °} = I8       ☑
Ir_a(I4, EXPR_STMT)
Ir_a(I5, EXPR_STMT)
Ir_a(I21, EXPR_STMT)

Ir_a(I3, FOR_STMT) = {STATEMENT -> FOR_STMT °} = I9     ☑
Ir_a(I4, FOR_STMT)
Ir_a(I5, FOR_STMT)
Ir_a(I21, FOR_STMT)

Ir_a(I3, IF_STMT) = {STATEMENT -> IF_STMT °} = I10      ☑
Ir_a(I4, IF_STMT)
Ir_a(I5, IF_STMT)
Ir_a(I21, IF_STMT)

Ir_a(I3, PRINT_STMT) = {STATEMENT -> PRINT_STMT °} = I11        ☑
Ir_a(I4, PRINT_STMT)
Ir_a(I5, PRINT_STMT)
Ir_a(I21, PRINT_STMT)

Ir_a(I3, RETURN_STMT) = {STATEMENT -> RETURN_STMT °} = I12      ☑
Ir_a(I4, RETURN_STMT)
Ir_a(I5, RETURN_STMT)
Ir_a(I21, RETURN_STMT)

Ir_a(I3, WHILE_STMT) = {STATEMENT -> WHILE_STMT °} = I13        ☑
Ir_a(I4, WHILE_STMT)
Ir_a(I5, WHILE_STMT)
Ir_a(I21, WHILE_STMT)

Ir_a(I3, BLOCK) = {STATEMENT -> BLOCK °} = I14      ☑
Ir_a(I4, BLOCK)
Ir_a(I5, BLOCK)
Ir_a(I21, BLOCK)

Ir_a(I3, EXPRESSION) = {EXPR_STMT -> EXPRESSION°;} = I15        ☑
Ir_a(I4, EXPRESSION)
Ir_a(I5, EXPRESSION)
Ir_a(I21, EXPRESSION)

Ir_a(I3, for) = {FOR_STMT -> for°(FOR_STMT_1 FOR_STMT_2 FOR_STMT_3) STATEMENT} = I16        ☑
Ir_a(I4, for)
Ir_a(I5, for)
Ir_a(I21, for)

Ir_a(I3, if) = {IF_STMT -> if°(EXPRESSION) STATEMENT ELSE_STATEMENT} = I17      ☑
Ir_a(I4, if)
Ir_a(I5, if)
Ir_a(I21, if)

Ir_a(I3, print) = {PRINT_STMT -> print °EXPRESSION, ...} = I18      ☑
Ir_a(I4, print)
Ir_a(I5, print)
Ir_a(I21, print)

Ir_a(I3, return) = {RETURN_STMT -> return °RETURN_EXP_OPC;, ...} = I19      ☑
Ir_a(I4, return)
Ir_a(I5, return)
Ir_a(I21, return)

Ir_a(I3, while) = {WHILE_STMT -> while °(EXPRESSION) STATEMENT} = I20       ☑
Ir_a(I4, while)
Ir_a(I5, while)
Ir_a(I21, while)

Ir_a(I3, {) = {BLOCK -> {°DECLARATION}, ...} = I21      ☑
Ir_a(I4, {)
Ir_a(I5, {)
Ir_a(I21, {)

Ir_a(I3, ASSIGNMENT) = {EXPRESSION -> ASSIGNMENT°} = I22        ☑
Ir_a(I4, ASSIGNMENT)
Ir_a(I5, ASSIGNMENT)
Ir_a(I18, ASSIGNMENT)
Ir_a(I21, ASSIGNMENT)
Ir_a(I40, ASSIGNMENT)
Ir_a(I49, ASSIGNMENT)
Ir_a(I53, ASSIGNMENT)
Ir_a(I56, ASSIGNMENT)

Ir_a(I3, LOGIC_OR) = {ASSIGNMENT -> LOGIC_OR °ASSIGNMENT_OPC, ...} = I23        ☑
Ir_a(I4, LOGIC_OR)
Ir_a(I5, LOGIC_OR)
Ir_a(I18, LOGIC_OR)
Ir_a(I21, LOGIC_OR)
Ir_a(I40, LOGIC_OR)
Ir_a(I49, LOGIC_OR)
Ir_a(I53, LOGIC_OR)
Ir_a(I56, LOGIC_OR)

Ir_a(I3, LOGIC_AND) = {LOGIC_OR -> LOGIC_AND °LOGIC_OR_2, ...} = I24        ☑
Ir_a(I4, LOGIC_AND)
Ir_a(I5, LOGIC_AND)
Ir_a(I18, LOGIC_AND)
Ir_a(I21, LOGIC_AND)
Ir_a(I40, LOGIC_AND)
Ir_a(I49, LOGIC_AND)
Ir_a(I53, LOGIC_AND)
Ir_a(I56, LOGIC_AND)

Ir_a(I3, EQUALITY) = {LOGIC_AND -> EQUALITY °LOGIC_AND_2, ...} = I25        ☑
Ir_a(I4, EQUALITY)
Ir_a(I5, EQUALITY)
Ir_a(I18, EQUALITY)
Ir_a(I21, EQUALITY)
Ir_a(I40, EQUALITY)
Ir_a(I49, EQUALITY)
Ir_a(I53, EQUALITY)
Ir_a(I56, EQUALITY)
Ir_a(I58, EQUALITY)

Ir_a(I3, COMPARISON) = {EQUALITY -> COMPARISON °EQUALITY_2, ...} = I26      ☑
Ir_a(I4, COMPARISON)
Ir_a(I5, COMPARISON)
Ir_a(I18, COMPARISON)
Ir_a(I21, COMPARISON)
Ir_a(I40, COMPARISON)
Ir_a(I49, COMPARISON)
Ir_a(I53, COMPARISON)
Ir_a(I56, COMPARISON)
Ir_a(I58, COMPARISON)
Ir_a(I60, COMPARISON)

Ir_a(I3, TERM) = {COMPARISON -> TERM °COMPARISON_2, ...} = I27      ☑
Ir_a(I4, TERM)
Ir_a(I5, TERM)
Ir_a(I18, TERM)
Ir_a(I21, TERM)
Ir_a(I40, TERM)
Ir_a(I49, TERM)
Ir_a(I53, TERM)
Ir_a(I56, TERM)
Ir_a(I58, TERM)
Ir_a(I60, TERM)

Ir_a(I3, FACTOR) = {TERM -> FACTOR °TERM_2, ...} = I28      ☑
Ir_a(I4, FACTOR)
Ir_a(I5, FACTOR)
Ir_a(I18, FACTOR)
Ir_a(I21, FACTOR)
Ir_a(I40, FACTOR)
Ir_a(I49, FACTOR)
Ir_a(I53, FACTOR)
Ir_a(I56, FACTOR)
Ir_a(I58, FACTOR)
Ir_a(I60, FACTOR)

Ir_a(I3, UNARY) = {FACTOR -> UNARY °FACTOR_2, ...} = I29        ☑
Ir_a(I4, UNARY)
Ir_a(I5, UNARY)
Ir_a(I18, UNARY)
Ir_a(I21, UNARY)
Ir_a(I40, UNARY)
Ir_a(I49, UNARY)
Ir_a(I53, UNARY)
Ir_a(I56, UNARY)
Ir_a(I58, UNARY)
Ir_a(I60, UNARY)

Ir_a(I3, !) = {UNARY -> ! °UNARY, ...} = I30        ☑
Ir_a(I4, !)
Ir_a(I5, !)
Ir_a(I18, !)
Ir_a(I21, !)
Ir_a(I30, !)
Ir_a(I31, !)
Ir_a(I40, !)
Ir_a(I49, !)
Ir_a(I53, !)
Ir_a(I56, !)
Ir_a(I58, !)
Ir_a(I60, !)

Ir_a(I3, -) = {UNARY -> - °UNARY, ...} = I31        ☑
Ir_a(I4, -)
Ir_a(I5, -)
Ir_a(I18, -)
Ir_a(I21, -)
Ir_a(I30, -)
Ir_a(I31, -)
Ir_a(I40, -)
Ir_a(I49, -)
Ir_a(I53, -)
Ir_a(I56, -)
Ir_a(I58, -)
Ir_a(I60, -)

Ir_a(I3, CALL) = {UNARY -> CALL °} = I32        ☑
Ir_a(I4, CALL)
Ir_a(I5, CALL)
Ir_a(I18, CALL)
Ir_a(I21, CALL)
Ir_a(I30, CALL)
Ir_a(I31, CALL)
Ir_a(I40, CALL)
Ir_a(I49, CALL)
Ir_a(I53, CALL)
Ir_a(I56, CALL)
Ir_a(I58, CALL)
Ir_a(I60, CALL)

Ir_a(I3, PRIMARY) = {CALL -> PRIMARY °CALL_2, ...} = I33        ☑
Ir_a(I4, PRIMARY)
Ir_a(I5, PRIMARY)
Ir_a(I18, PRIMARY)
Ir_a(I21, PRIMARY)
Ir_a(I30, PRIMARY)
Ir_a(I31, PRIMARY)
Ir_a(I40, PRIMARY)
Ir_a(I49, PRIMARY)
Ir_a(I53, PRIMARY)
Ir_a(I56, PRIMARY)
Ir_a(I58, PRIMARY)
Ir_a(I60, PRIMARY)

Ir_a(I3, true) = {PRIMARY -> true °} = I34      ☑
Ir_a(I4, true)
Ir_a(I5, true)
Ir_a(I18, true)
Ir_a(I21, true)
Ir_a(I30, true)
Ir_a(I31, true)
Ir_a(I40, true)
Ir_a(I49, true)
Ir_a(I53, true)
Ir_a(I56, true)
Ir_a(I58, true)
Ir_a(I60, true)

Ir_a(I3, false) = {PRIMARY -> false °} = I35        ☑
Ir_a(I4, false)
Ir_a(I5, false)
Ir_a(I18, false)
Ir_a(I21, false)
Ir_a(I30, false)
Ir_a(I31, false)
Ir_a(I40, false)
Ir_a(I49, false)
Ir_a(I53, false)
Ir_a(I56, false)
Ir_a(I58, false)
Ir_a(I60, false)

Ir_a(I3, null) = {PRIMARY -> null °} = I36      ☑
Ir_a(I4, null)
Ir_a(I5, null)
Ir_a(I18, null)
Ir_a(I21, null)
Ir_a(I30, null)
Ir_a(I31, null)
Ir_a(I40, null)
Ir_a(I49, null)
Ir_a(I53, null)
Ir_a(I56, null)
Ir_a(I58, null)
Ir_a(I60, null)

Ir_a(I3, number) = {PRIMARY -> number °} = I37      ☑
Ir_a(I4, number)
Ir_a(I5, number)
Ir_a(I18, number)
Ir_a(I21, number)
Ir_a(I30, number)
Ir_a(I31, number)
Ir_a(I40, number)
Ir_a(I49, number)
Ir_a(I53, number)
Ir_a(I56, number)
Ir_a(I58, number)
Ir_a(I60, number)

Ir_a(I3, string) = {PRIMARY -> string °} = I38      ☑
Ir_a(I4, string)
Ir_a(I5, string)
Ir_a(I18, string)
Ir_a(I21, string)
Ir_a(I30, string)
Ir_a(I31, string)
Ir_a(I40, string)
Ir_a(I49, string)
Ir_a(I53, string)
Ir_a(I56, string)
Ir_a(I58, string)
Ir_a(I60, string)

Ir_a(I3, id) = {PRIMARY -> id °} = I39      ☑
Ir_a(I4, id)
Ir_a(I5, id)
Ir_a(I18, id)
Ir_a(I21, id)
Ir_a(I30, id)
Ir_a(I31, id)
Ir_a(I40, id)
Ir_a(I49, id)
Ir_a(I53, id)
Ir_a(I56, id)
Ir_a(I58, id)
Ir_a(I60, id)

Ir_a(I3, '(') = {PRIMARY -> (°EXPRESSION), ...} = I40       ☑
Ir_a(I4, '(')
Ir_a(I5, '(')
Ir_a(I18, '(')
Ir_a(I21, '(')
Ir_a(I30, '(')
Ir_a(I31, '(')
Ir_a(I40, '(')
Ir_a(I49, '(')
Ir_a(I53, '(')
Ir_a(I56, '(')
Ir_a(I58, '(')
Ir_a(I60, '(')

Ir_a(I4, DECLARATION) = {DECLARATION -> VAR_DECL DECLARATION°} = I42        ☑

Ir_a(I5, DECLARATION) = {DECLARATION -> STATEMENT DECLARATION°} = I43       ☑

Ir_a(I6, FUNCTION) = {FUN_DECL -> fun FUNCTION°} = I44      ☑

Ir_a(I6, id) = {FUNCTION -> id°(PARAMETERS_OPC) BLOCK} = I45        ☑

Ir_a(I7, id) = {VAR_DECL -> var id °VAR_INIT;, VAR_INIT -> °= EXPRESSION, VAR_INIT -> °} = I46      ☑

Ir_a(I15, ;) = {EXPR_STMT -> EXPRESSION;°} = I47        ☑

Ir_a(I16, '(') = {FOR_STMT -> for(°FOR_STMT_1 FOR_STMT_2 FOR_STMT_3) STATEMENT, FOR_STMT_1 -> °VAR_DECL,
      FOR_STMT_1 -> °EXPR_STMT, FOR_STMT_1 -> °;} = I48     ☑

Ir_a(I17, '(') = {IF_STMT -> if(°EXPRESSION) STATEMENT ELSE_STATEMENT, EXPRESSION -> °ASSIGNMENT,
      ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC, LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I49       ☑

Ir_a(I18, EXPRESSION) = {PRINT_STMT -> print EXPRESSION°} = I50     ☑

Ir_a(I19, RETURN_EXP_OPC) = {RETURN_STMT -> return RETURN_EXP_OPC°;} = I51      ☑

Ir_a(I19, EXPRESSION) = {RETURN_EXP_OPC -> EXPRESSION°} = I52       ☑

Ir_a(I20, '(') = {WHILE_STMT -> while (°EXPRESSION) STATEMENT, EXPRESSION -> °ASSIGNMENT, ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC,
      LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I53       ☑

Ir_a(I21, DECLARATION) = {BLOCK -> {DECLARATION°}} = I54        ☑

Ir_a(I23, ASSIGNMENT_OPC) = {ASSIGNMENT -> LOGIC_OR ASSIGNMENT_OPC°} = I55      ☑

Ir_a(I23, =) = {ASSIGNMENT_OPC -> = °EXPRESSION, EXPRESSION -> °ASSIGNMENT, ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC,
      LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I56       ☑

Ir_a(I24, LOGIC_OR_2) = {LOGIC_OR -> LOGIC_AND LOGIC_OR_2°} = I57       ☑

Ir_a(I24, or) = {LOGIC_OR_2 -> or °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I58       ☑

Ir_a(I25, LOGIC_AND_2) = {LOGIC_AND -> EQUALITY LOGIC_AND_2°} = I59     ☑

Ir_a(I25, and) = {LOGIC_AND_2 -> and °EQUALITY LOGIC_AND_2, EQUALITY -> °COMPARISON EQUALITY_2,
      COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2, FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY,
      UNARY -> °-UNARY, UNARY -> °CALL, CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null,
      PRIMARY -> °number, PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I60       ☑

Ir_a(I26, EQUALITY_2) = {EQUALITY -> COMPARISON EQUALITY_2°} = I61      ☑

Ir_a(I26, !) = {EQUALITY_2 -> !°= COMPARISON EQUALITY_2} = I62      ☑

Ir_a(I26, =) = {EQUALITY_2 -> =°= COMPARISON EQUALITY_2} = I63      ☑

Ir_a(I27, COMPARISON_2) = {COMPARISON -> TERM COMPARISON_2°} = I64      ☑

Ir_a(I27, >) = {COMPARISON_2 -> >°= TERM COMPARISON_2, COMPARISON_2 -> > °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL, CALL -> °PRIMARY CALL_2,
      PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number, PRIMARY -> °string,
      PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I65

Ir_a(I27, <) = {COMPARISON_2 -> <°= TERM COMPARISON_2, COMPARISON_2 -> < °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL, CALL -> °PRIMARY CALL_2,
      PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number, PRIMARY -> °string,
      PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I66

Ir_a(I28, TERM_2) = {TERM -> FACTOR TERM_2°} = I67

Ir_a(I28, -) = {TERM_2 -> - °FACTOR TERM_2, FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY,
      UNARY -> °-UNARY, UNARY -> °CALL, CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null,
      PRIMARY -> °number, PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I68

Ir_a(I28, +) = {TERM_2 -> + °FACTOR TERM_2, FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY,
      UNARY -> °-UNARY, UNARY -> °CALL, CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null,
      PRIMARY -> °number, PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I69

Ir_a(I29, FACTOR_2) = {FACTOR -> UNARY FACTOR_2°} = I70

Ir_a(I29, /) = {FACTOR_2 -> / °UNARY FACTOR_2, UNARY -> °!UNARY,
      UNARY -> °-UNARY, UNARY -> °CALL, CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null,
      PRIMARY -> °number, PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I71

Ir_a(I29, *) = {FACTOR_2 -> * °UNARY FACTOR_2, UNARY -> °!UNARY,
      UNARY -> °-UNARY, UNARY -> °CALL, CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null,
      PRIMARY -> °number, PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I72

Ir_a(I30, UNARY) = {UNARY -> ! UNARY°} = I73

Ir_a(I31, UNARY) = {UNARY -> - UNARY°} = I74

Ir_a(I33, CALL_2) = {CALL -> PRIMARY CALL_2°} = I75

Ir_a(I33, '(') = {CALL_2 -> (°ARGUMENTS_OPC), ARGUMENTS_OPC -> °EXPRESSION ARGUMENTS, ARGUMENTS_OPC -> °} = I76

Ir_a(I40, EXPRESSION) = {PRIMARY -> (EXPRESSION°)} = I77

Ir_a(I45, '(') = {FUNCTION -> id(°PARAMETERS_OPC) BLOCK, PARAMETERS_OPC -> °PARAMETERS, PARAMETERS_OPC -> °} = I78

Ir_a(I46, VAR_INIT) = {VAR_DECL -> var id VAR_INIT°;} = I79

Ir_a(I46, =) = {VAR_INIT -> = °EXPRESSION, EXPRESSION -> °ASSIGNMENT, ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC,
      LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I80

Ir_a(I48, FOR_STMT_1) = {FOR_STMT -> for(FOR_STMT_1 °FOR_STMT_2 FOR_STMT_3) STATEMENT, FOR_STMT_2 -> °EXPRESSION;,
      FOR_STMT_2 -> °;} = I81

Ir_a(I48, VAR_DECL) = {FOR_STMT_1 -> VAR_DECL°} = I82

Ir_a(I48, EXPR_STMT) = {FOR_STMT_1 -> EXPR_STMT°} = I83

Ir_a(I48, ;) = {FOR_STMT_1 -> ;°} = I84

Ir_a(I49, EXPRESSION) = {IF_STMT -> if(EXPRESSION°) STATEMENT ELSE_STATEMENT} = I85

Ir_a(I51, ;) = {RETURN_STMT -> return RETURN_EXP_OPC;°} = I86

Ir_a(I53, EXPRESSION) = {WHILE_STMT -> while (EXPRESSION°) STATEMENT} = I87

Ir_a(I54, }) = {BLOCK -> {DECLARATION}°} = I88

Ir_a(I56, EXPRESSION) = {ASSIGNMENT_OPC -> = EXPRESSION°} = I89

Ir_a(I58, LOGIC_AND) = {LOGIC_OR_2 -> or LOGIC_AND °LOGIC_OR_2, LOGIC_OR_2 -> °or LOGIC_AND LOGIC_OR_2,
      LOGIC_OR_2 -> °} = I90

Ir_a(I60, EQUALITY) = {LOGIC_AND_2 -> and EQUALITY °LOGIC_AND_2, LOGIC_AND_2 -> °and EQUALITY LOGIC_AND_2,
      LOGIC_AND_2 -> °} = I91

Ir_a(I62, =) = {EQUALITY_2 -> != °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL, CALL -> °PRIMARY CALL_2,
      PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number, PRIMARY -> °string,
      PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I92

Ir_a(I63, =) = {EQUALITY_2 -> == °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL, CALL -> °PRIMARY CALL_2,
      PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number, PRIMARY -> °string,
      PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I93

Ir_a()
I0 = {PROGRAM' -> °PROGRAM, PROGRAM -> °DECLARATION, DECLARATION -> °FUN_DECL DECLARATION,
      DECLARATION -> °VAR_DECL DECLARATION, DECLARATION -> °STATEMENT DECLARATION, DECLARATION -> °,
      FUN_DECL -> °fun FUNCTION, VAR_DECL -> °var id VAR_INIT, STATEMENT -> °EXPR_STMT,
      STATEMENT -> °FOR_STMT, STATEMENT -> °IF_STMT, STATEMENT -> °PRINT_STMT, STATEMENT -> °RETURN_STMT,
      STATEMENT -> °WHILE_STMT, STATEMENT -> °BLOCK, EXPR_STMT -> °EXPRESSION;,
      FOR_STMT -> °for(FOR_STMT_1 FOR_STMT_2 FOR_STMT_3) STATEMENT,
      IF_STMT -> °if(EXPRESSION) STATEMENT ELSE_STATEMENT, PRINT_STMT -> °print EXPRESSION;,
      RETURN_STMT -> °return RETURN_EXP_OPC;, WHILE_STMT -> °while(EXPRESSION) STATEMENT,
      BLOCK -> °{DECLARATION}, EXPRESSION -> °ASSIGNMENT, ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC,
      LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2, --
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)}

Ir_a(I0, PROGRAM) = {PROGRAM' -> PROGRAM°} = I1

Ir_a(I0, DECLARATION) = {PROGRAM -> DECLARATION°} = I2

Ir_a(I0, FUN_DECL) = {DECLARATION -> FUN_DECL °DECLARATION, DECLARATION-> °FUN_DECL DECLARATION,
      DECLARATION -> °VAR_DECL DECLARATION, DECLARATION -> °STATEMENT DECLARATION, DECLARATION -> °,
      FUN_DECL -> °fun FUNCTION, VAR_DECL -> °var id VAR_INIT, STATEMENT -> °EXPR_STMT,
      STATEMENT -> °FOR_STMT, STATEMENT -> °IF_STMT, STATEMENT -> °PRINT_STMT, STATEMENT -> °RETURN_STMT,
      STATEMENT -> °WHILE_STMT, STATEMENT -> °BLOCK, EXPR_STMT -> °EXPRESSION;,
      FOR_STMT -> °for(FOR_STMT_1 FOR_STMT_2 FOR_STMT_3) STATEMENT,
      IF_STMT -> °if(EXPRESSION) STATEMENT ELSE_STATEMENT, PRINT_STMT -> °print EXPRESSION;,
      RETURN_STMT -> °return RETURN_EXP_OPC;, WHILE_STMT -> °while(EXPRESSION) STATEMENT,
      BLOCK -> °{DECLARATION}, EXPRESSION -> °ASSIGNMENT, ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC,
      LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I3

Ir_a(I0, VAR_DECL) = {DECLARATION -> VAR_DECL °DECLARATION, DECLARATION -> °FUN_DECL DECLARATION,
      DECLARATION -> °VAR_DECL DECLARATION, DECLARATION -> °STATEMENT DECLARATION, DECLARATION -> °,
      FUN_DECL -> °fun FUNCTION, VAR_DECL -> °var id VAR_INIT, STATEMENT -> °EXPR_STMT,
      STATEMENT -> °FOR_STMT, STATEMENT -> °IF_STMT, STATEMENT -> °PRINT_STMT, STATEMENT -> °RETURN_STMT,
      STATEMENT -> °WHILE_STMT, STATEMENT -> °BLOCK, EXPR_STMT -> °EXPRESSION;,
      FOR_STMT -> °for(FOR_STMT_1 FOR_STMT_2 FOR_STMT_3) STATEMENT,
      IF_STMT -> °if(EXPRESSION) STATEMENT ELSE_STATEMENT, PRINT_STMT -> °print EXPRESSION;,
      RETURN_STMT -> °return RETURN_EXP_OPC;, WHILE_STMT -> °while(EXPRESSION) STATEMENT,
      BLOCK -> °{DECLARATION}, EXPRESSION -> °ASSIGNMENT, ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC,
      LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I4

Ir_a(I0, STATEMENT) = {DECLARATION -> STATEMENT °DECLARATION, DECLARATION -> °FUN_DECL DECLARATION,
      DECLARATION -> °VAR_DECL DECLARATION, DECLARATION -> °STATEMENT DECLARATION, DECLARATION -> °,
      FUN_DECL -> °fun FUNCTION, VAR_DECL -> °var id VAR_INIT, STATEMENT -> °EXPR_STMT,
      STATEMENT -> °FOR_STMT, STATEMENT -> °IF_STMT, STATEMENT -> °PRINT_STMT, STATEMENT -> °RETURN_STMT,
      STATEMENT -> °WHILE_STMT, STATEMENT -> °BLOCK, EXPR_STMT -> °EXPRESSION;,
      FOR_STMT -> °for(FOR_STMT_1 FOR_STMT_2 FOR_STMT_3) STATEMENT,
      IF_STMT -> °if(EXPRESSION) STATEMENT ELSE_STATEMENT, PRINT_STMT -> °print EXPRESSION;,
      RETURN_STMT -> °return RETURN_EXP_OPC;, WHILE_STMT -> °while(EXPRESSION) STATEMENT,
      BLOCK -> °{DECLARATION}, EXPRESSION -> °ASSIGNMENT, ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC,
      LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I5

Ir_a(I0, fun) = {FUN_DECL -> fun °FUNCTION, FUNCTION -> °id(PARAMETERS_OPC) BLOCK} = I6

Ir_a(I0, var) = {VAR_DECL -> var °id VAR_INIT} = I7

Ir_a(I0, EXPR_STMT) = {STATEMENT -> EXPR_STMT °} = I8

Ir_a(I0, FOR_STMT) = {STATEMENT -> FOR_STMT °} = I9

Ir_a(I0, IF_STMT) = {STATEMENT -> IF_STMT °} = I10

Ir_a(I0, PRINT_STMT) = {STATEMENT -> PRINT_STMT °} = I11

Ir_a(I0, RETURN_STMT) = {STATEMENT -> RETURN_STMT °} = I12

Ir_a(I0, WHILE_STMT) = {STATEMENT -> WHILE_STMT °} = I13

Ir_a(I0, BLOCK) = {STATEMENT -> BLOCK °} = I14

Ir_a(I0, EXPRESSION) = {EXPR_STMT -> EXPRESSION °} = I15

Ir_a(I0, for) = {FOR_STMT -> for°(FOR_STMT_1 FOR_STMT_2 FOR_STMT_3) STATEMENT} = I16

Ir_a(I0, if) = {if°(EXPRESSION) STATEMENT ELSE_STATEMENT} = I17

Ir_a(I0, print) = {print °EXPRESSION, EXPRESSION -> °ASSIGNMENT, ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC,
      LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I18

Ir_a(I0, return) = {RETURN_STMT -> return °RETURN_EXP_OPC, RETURN_EXP_OPC -> °EXPRESSION,
      RETURN_EXP_OPC -> °} = I19

Ir_a(I0, while) = {WHILE_STMT -> while *(EXPRESSION) STATEMENT} = I20

Ir_a(I0, {) = {BLOCK -> {*DECLARATION}, DECLARATION -> °FUN_DECL DECLARATION,
      DECLARATION -> °VAR_DECL DECLARATION, DECLARATION -> °STATEMENT DECLARATION, DECLARATION -> °,
      FUN_DECL -> °fun FUNCTION, VAR_DECL -> °var id VAR_INIT, STATEMENT -> °EXPR_STMT,
      STATEMENT -> °FOR_STMT, STATEMENT -> °IF_STMT, STATEMENT -> °PRINT_STMT, STATEMENT -> °RETURN_STMT,
      STATEMENT -> °WHILE_STMT, STATEMENT -> °BLOCK, EXPR_STMT -> °EXPRESSION;,
      FOR_STMT -> °for(FOR_STMT_1 FOR_STMT_2 FOR_STMT_3) STATEMENT,
      IF_STMT -> °if(EXPRESSION) STATEMENT ELSE_STATEMENT, PRINT_STMT -> °print EXPRESSION;,
      RETURN_STMT -> °return RETURN_EXP_OPC;, WHILE_STMT -> °while(EXPRESSION) STATEMENT,
      BLOCK -> °{DECLARATION}, EXPRESSION -> °ASSIGNMENT, ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC,
      LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2,
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)}

Ir_a(I0, ASSIGNMENT) = {EXPRESSION -> ASSIGNMENT°} = I21

Ir_a(I0, LOGIC_OR) = {ASSIGNMENT -> LOGIC_OR °ASSIGNMENT_OPC, ASSIGNMENT_OPC -> °= EXPRESSION,
      ASSIGNMENT_OPC -> °} = I22

Ir_a(I0, LOGIC_AND) = {LOGIC_OR -> LOGIC_AND °LOGIC_OR_2, LOGIC_OR_2 -> °or LOGIC_AND LOGIC_OR_2
      LOGIC_OR_2 -> °} = I23

Ir_a(I0, EQUALITY) = {LOGIC_AND -> EQUALITY °LOGIC_AND_2, LOGIC_AND_2 -> °and EQUALITY LOGIC_AND_2,
      LOGIC_AND_2 -> °} = I24

Ir_a(I0, COMPARISON) = {EQUALITY -> COMPARISON °EQUALITY_2, EQUALITY_2 -> °!= COMPARISON EQUALITY_2,
      EQUALITY_2 -> °== COMPARISON EQUALITY_2, EQUALITY_2 -> °} = I25

Ir_a(I0, TERM) = {COMPARISON -> TERM °COMPARISON_2, COMPARISON_2 -> °> TERM COMPARISON_2,
      COMPARISON_2 -> °>= TERM COMPARISON_2, COMPARISON_2 -> °< TERM COMPARISON_2,
      COMPARISON_2 -> °<= TERM COMPARISON_2, COMPARISON_2 -> °} = I26

Ir_a(I0, FACTOR) = {TERM -> FACTOR °TERM_2, TERM_2 -> °- FACTOR TERM_2, TERM_2 -> °+ FACTOR TERM_2,
      TERM_2 -> °} = I27

Ir_a(I0, UNARY) = {FACTOR -> UNARY °FACTOR_2, FACTOR_2 -> °/ UNARY FACTOR_2, FACTOR_2 -> °* FACTOR_2,
      FACTOR_2 -> °} = I28

Ir_a(I0, !) = {UNARY -> ! °UNARY, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I29

Ir_a(I0, °) = {UNARY -> - °UNARY, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)} = I30

Ir_a(I0, CALL) = {UNARY -> CALL °} = I31

Ir_a(I0, PRIMARY) = {CALL -> PRIMARY °CALL_2, CALL_2 -> °(ARGUMENTS_OPC), CALL_2 -> °} = I32

Ir_a(I0, true) = {PRIMARY -> true °} = I33

Ir_a(I0, false) = {PRIMARY -> false °} = I34

Ir_a(I0, null) = {PRIMARY -> null °} = I35

Ir_a(I0, number) = {PRIMARY -> number °} = I36

Ir_a(I0, string) = {PRIMARY -> string °} = I37

Ir_a(I0, id) = {PRIMARY -> id °} = I38

Ir_a(I0, '(') = {PRIMARY -> (°EXPRESSION), EXPRESSION -> °ASSIGNMENT, ASSIGNMENT -> °LOGIC_OR ASSIGNMENT_OPC,
      LOGIC_OR -> °LOGIC_AND LOGIC_OR_2, LOGIC_AND -> °EQUALITY LOGIC_AND_2,
      EQUALITY -> °COMPARISON EQUALITY_2, COMPARISON -> °TERM COMPARISON_2, TERM -> °FACTOR TERM_2, --
      FACTOR -> °UNARY FACTOR_2, UNARY -> °!UNARY, UNARY -> °-UNARY, UNARY -> °CALL,
      CALL -> °PRIMARY CALL_2, PRIMARY -> °true, PRIMARY -> °false, PRIMARY -> °null, PRIMARY -> °number,
      PRIMARY -> °string, PRIMARY -> °id, PRIMARY -> °(EXPRESSION)}